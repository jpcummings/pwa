@
\section{Introduction}

During a partial wave analysis, [[gamp]] generates a large number of
amplitude files, usualy in binary format to save space.  Sometimes it
is useful, or at least comforting to be able to see the numbers that
are in these files.  [[vamp]] is a trivial program to {\em v}iew {\em
amp}litudes.

[[vamp]] read from standard input and writes to standard output.  It has
only one real option, [[-m max]], to set the maximum number of amplitudes
to display.  There is also a [[-h]] option to display the usage.

\section{The [[main]] routine}

Again, this program is trivial--parse arguments, loop until the read
from the file fails, printing the number each time through the loop.

<<vamp.cc>>=
#include <complex>
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <unistd.h>

using std::cin;
using std::cout;
using std::cerr;
using std::endl;
using std::complex;

<<printUsage definition>>

int main(int argc, char** argv) {

	int maxEvents = 0;
	int nRead = 0;
	int binaryMode = 0;

	<<parse arguments>>

	complex<double> a;

	if (binaryMode) {
	while ((cin >> a) && (maxEvents?nRead<maxEvents:1) ) {
		nRead++;
		cout.write((char*) &a,sizeof(a));
	}
	}
	else {

	while( (cin.read((char*) &a,sizeof(a))) && (maxEvents?nRead<maxEvents:1) ) {
		nRead++;
		//cout << a << endl;
		printf("%20.19lf,%20.19lf\n",real(a),imag(a));
	}
}

	return 0;

}

@
We use [[getopt]] to parse the arguments. [[-m max]] sets the maximum
number of amplitudes to display and [[-h]] print the usage.


<<parse arguments>>=
    extern char* optarg;
    int c;
    while ( (c = getopt(argc,argv, "m:h:B")) != -1 )
        switch(c) {
            case 'm':
                maxEvents = atoi(optarg);
                break;
		case 'B':
			binaryMode = 1;
			break;
            case 'h':
            case '?':
                printUsage(argv[0]);
				exit(0);
	       
        }

<<printUsage definition>>=
void printUsage(char* prog) {
	cerr << "usage:" << endl;
	cerr << "  " << prog << " [-h] [-m maxEvents] [-B] < inputfile" << endl;
	cerr << "-B\tconvert ascii to binary mode" << endl;

}
