@
\section{Lorentz Transformations}
This class provides Lorentz transformations for [[threeVec]]'s and [[fourVec]]'s.
Rotations are used often, and they are defined as their own class.
Both classes are derived from the [[matrix]] template.

<<lorentz.h>>=
#ifndef __LORENTZ_H_
#define __LORENTZ_H_
	<<includes>>
	<<rotation class>>
	<<lorentzTransform class>>
#endif

<<includes>>=
#include <cmath>
#include <Vec.h>
#include <matrix.h>

<<rotation class>>=
class rotation: public matrix<double> {

	public:
		rotation():matrix<double>(3,3){;}
		rotation(double,double,double);
		~rotation() {;}
		
		rotation set(double,double,double);
		rotation set(const threeVec&);
		
		friend threeVec operator*=(threeVec&,const rotation&);
//		friend particle operator*=(particle&,const rotation&);

};


<<lorentzTransform class>>=
class lorentzTransform: public matrix<double> {
	friend class fourVec;
	
	private:
		double _beta;
		double _gamma;

	public:
		lorentzTransform():matrix<double>(4,4) { _beta=0; _gamma=1; }
		lorentzTransform(double,double,double);
		lorentzTransform(const threeVec& beta);
		lorentzTransform(const fourVec&);
		lorentzTransform(const rotation&);
		~lorentzTransform() {;}

		lorentzTransform set(double,double,double); // rotation
		lorentzTransform set(const threeVec& beta); // boost
		lorentzTransform set(const fourVec&); //boost to rest frame
		lorentzTransform set(const rotation&);

		double beta() { return _beta;}

//		lorentzTransform operator*=(const lorentzTransform&);
		friend fourVec operator*=(fourVec&,const lorentzTransform&);

};


<<lorentz.cc>>=
#include <lorentz.h>
	<<rotation methods>>
	<<lorentzTransform methods>>
@
[[g++]] does not instantiate templates defined in other files.  To avaoid undefined symbol errors,  I explicitly instantiate [[matrix<double>]] here.
<<lorentz.cc>>=
//	template class matrix<double>;


@
Rotations are defined by the three Euler algles $\alpha$, $\beta$, and $\gamma$.  The matrix for an arbitrary rotation is then
\begin{displaymath}
\left(
\begin{array}{ccc}
\cos{\alpha}\cos{\beta}\cos{\gamma} - \sin{\alpha}\sin{\gamma} & \cos{\beta}\cos{\gamma}\sin{\alpha} + \cos{\alpha}\sin{\gamma} & -\cos{\gamma}\sin{\beta} \\
-\sin{\gamma}\cos{\beta}\cos{\alpha} - \cos{\gamma}\sin{\alpha} & -\sin{\gamma}\cos{\beta}\sin{\alpha} + \cos{\gamma}\cos{\alpha} & \sin{\beta}\sin{\gamma} \\
\cos{\alpha}\sin{\beta} & \sin{\alpha}\sin{\beta} & \cos{\beta} \\
\end{array}
\right)
\end{displaymath}



<<rotation methods>>=
rotation rotation::set(double alpha, double beta, double gamma){
	double ca, sa, cb, sb, cg, sg;
	
	ca = cos(alpha);
	sa = sin(alpha);
	cb = cos(beta);
	sb = sin(beta);
	cg = cos(gamma);
	sg = sin(gamma);
	
	this->el(0,0) =  ca*cb*cg - sa*sg;
	this->el(0,1) =  cb*cg*sa + ca*sg;
	this->el(0,2) = -cg*sb;
	
	this->el(1,0) = -sg*cb*ca - cg*sa;
	this->el(1,1) = -sg*cb*sa + cg*ca;
	this->el(1,2) =  sb*sg;
	
	this->el(2,0) =  ca*sb;
	this->el(2,1) =  sa*sb;
	this->el(2,2) =  cb;

	return (*this);
}

rotation::rotation(double alpha, double beta, double gamma):matrix<double>(3,3) {
	this->set(alpha, beta, gamma);
}

rotation rotation::set(const threeVec& V){
	this->set(V.phi(), V.theta(), 0.0);
	return (*this);
}

threeVec operator*=(threeVec& V,const rotation& R){
	V = R*V;
	return V;
}

//particle operator*=(particle& part,const rotation& R) {
//	part._p._V *= R*part._p._V;
//	return part;
//}


@
If the Lorentz transformation is defined by three [[double]]'s,  assume they are Euler angles $\alpha$, $\beta$, and $\gamma$ for a rotation.  Use them to define a [[rotation]] and copy into the proper elements of [[*this]].

<<lorentzTransform methods>>=
	lorentzTransform lorentzTransform::set(const rotation& r) {
		this->zero();
		for (int row = 1; row < 4; row++ ) {
			for (int col = 1; col < 4; col++ ) {
//				this->el(row,col) = r.el(row-1,col-1);
				this->el(row,col) = (const_cast<rotation*>(&r))->el(row-1,col-1);
			}
		}
		this->el(0,0) = 1;
		return(*this);
	}
	
	lorentzTransform lorentzTransform::set(double alpha, double beta, double gamma) {
		rotation r(alpha, beta, gamma);
		this->zero();
		this->set(r);
		return(*this);
	}

	lorentzTransform::lorentzTransform(double alpha,double beta,double gamma):matrix<double>(4,4) {
		this->set(alpha,beta,gamma);
	}

	lorentzTransform::lorentzTransform(const rotation& r):matrix<double>(4,4) {
		this->set(r);
	}


@
The primary method which sets up a Lorentz transformation takes a [[threeVec]] argument [[beta]], which is the velocity vector defining the boost.  The $4\times4$ Lorentz transformation matrix is given for an arbitrary $\vec{\beta}$ by
\begin{displaymath}
\left(
\begin{array}{cccc}
\gamma & \gamma\beta_x & \gamma\beta_y	& \gamma\beta_z \\
\gamma\beta_x & {\beta_x}^2{\gamma^2\over\gamma+1}+1 & \beta_x \beta_y{\gamma^2\over\gamma+1} & \beta_x \beta_z{\gamma^2\over\gamma+1} \\
\gamma\beta_y & \beta_x \beta_y{\gamma^2\over\gamma+1} & \beta_y^2{\gamma^2\over\gamma+1}+1	& \beta_y \beta_z{\gamma^2\over\gamma+1} \\
\gamma\beta_z & \beta_x \beta_z{\gamma^2\over\gamma+1} & \beta_y \beta_z{\gamma^2\over\gamma+1}	& \beta_z^2{\gamma^2\over\gamma+1}+1 \\
\end{array}
\right)
\end{displaymath}
where $\gamma = (1-\beta^2)^{-1/2}$. 


<<lorentzTransform methods>>=
lorentzTransform lorentzTransform::set(const threeVec& beta) {
	double gamma;
	double gFactor;
	
	this->_beta = beta.len();
	this->_gamma = 1.0/sqrt(1-beta.lenSq());
	gamma = this->_gamma;
	gFactor = pow(gamma,2)/(gamma+1);
	
	this->el(0,0) = gamma;
	this->el(0,1) = gamma*beta.x();
	this->el(0,2) = gamma*beta.y();
	this->el(0,3) = gamma*beta.z();
	
	this->el(1,1) = (pow(beta.x(),2)*gFactor)+1;
	this->el(1,2) = beta.x()*beta.y()*gFactor;
	this->el(1,3) = beta.x()*beta.z()*gFactor;

	this->el(2,2) = (pow(beta.y(),2)*gFactor)+1;
	this->el(2,3) = beta.y()*beta.z()*gFactor;

	this->el(3,3) = (pow(beta.z(),2)*gFactor)+1;
	
	this->el(1,0) = this->el(0,1);
	this->el(2,0) = this->el(0,2);
	this->el(2,1) = this->el(1,2);
	this->el(3,0) = this->el(0,3);
	this->el(3,1) = this->el(1,3);
	this->el(3,2) = this->el(2,3);

	return(*this);
}

lorentzTransform::lorentzTransform(const threeVec& beta):matrix<double>(4,4) {
	this->set(beta);
}


@
When defining a Lorentz transformation using a [[fourVec]],  I assume the vector [[p]] is a four-momentum $p_\mu$ and define the transformation to go to the rest frame of $p_\mu$.

<<lorentzTransform methods>>=
lorentzTransform lorentzTransform::set(const fourVec& p) {
	threeVec beta;
	
	beta.el(0) = -p.x()/p.t();
	beta.el(1) = -p.y()/p.t();
	beta.el(2) = -p.z()/p.t();
	
	this->set(beta);
	
	return(*this);
}

lorentzTransform::lorentzTransform(const fourVec& p):matrix<double>(4,4) {
	this->set(p);
}

// lorentzTransform lorentzTransform::operator*=(const lorentzTransform& L) {
	// this->_beta = L._beta;
	// this->_gamma = L._gamma;
// 	*this = *((lorentzTransform*) &(L * (*this)));
// 	return *this;
// }

fourVec operator*=(fourVec& v,const lorentzTransform& L){  //new
	v = L*v;
	return v;
}

