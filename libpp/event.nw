@
\def\nwnewline{\ifvmode\else\hfil\break\leavevmode\hbox{}\fi}
\def\meth #1 {\noindent\vrule width2cm height0.1cm depth0cm\hskip 3mm {\bf#1} \hfill \break }

\section{Introduction}
\label{intro}

The event class defined in this file is a ``summary record'' of
an interaction, to be used in analysis after reconstruction to the
four-momenta level.  The event class has, in addition to the usual
boilerplate methods, a means of getting a fourVec for a particle given
a name, charge, and index.  The index allows selction of a particular
particle if there are more than one of a given name and charge--{\em
i.e.}, pi-[1] and pi-[2].

\section{The [[event]] class public interface}
The public interface to the [[event]] class is described in this section.

The [[event]] class uses [[PDGtable]] from [[libpp.a]] which must be initialized before using the [[event]] class. For example:

\par\noindent [[
#include <event.h>

    int main() {
    event e;
    PDGtable.initialize();

    while( !(cin >> e).eof() ) {
        // do stuff
        cout << e;
    }

    return 0;
}
]]

<<public declarations>>=
	<<constructors>>
	<<mutators>>
	<<inspectors>>
	<<i/o methods>>
	<<friends>>
@
\subsection{Constructors, {\em etc.} }
This section lists the methods used to create, destroy, and copy [[event]]s.

\vspace{0.5cm}

\meth{event::event()}
The default constructor creates and initializes an empty event.
<<constructors>>=
	event();

@
\meth{event::event(const event\&)}
The copy constructor creates an event which is a copy of its argument.
<<constructors>>=
	event::event(const event&);

@
\meth{event::\~{}event()}
The [[event]] destructor frees all resources which have been allocated for an [[event]].
<<constructors>>=
	event::~event();

@
\meth{event::operator=(const event\& e)}
The assignment operator assigns a copy of its right hand argument to its left and returns a reference to the new left hand argument.
<<constructors>>=
	event& operator=(const event& e);

@
\subsection{Mutators}
Methods which change the state of the [[event]] are called mutators, which are listed in this section.

\vspace{0.5cm}

@
\meth{event::addfinal(const particle\& p)}
[[addfinal]] adds the [[particle p]] to the list of final state particles for this event.  It returns a reference to the [[event]] after the addition.
<<mutators>>=
	event& addfinal(const particle&);	

@
\meth{event::addinitial(const particle\& p)}
[[addinitial]] adds the [[particle p]] to the list of initial state particles for this event.  It returns a reference to the [[event]] after the addition.  Usually this method will not be called directly, use the [[beam]] and [[target]] mutators instead.
<<mutators>>=
	event& addinitial(const particle& p);	

@
\meth{event::erase()}
[[erase]] clears the [[event]]. All initial and final state particles are deleted.  It returns a reference to the cleared [[event]].
<<mutators>>=
	event& erase();

@
\meth{event::beam(const particle\& p)}
The [[beam]] mutator sets the beam of the event to [[p]] and adds [[p]] to the list of initial state particles.  It returns a reference to the [[event]] with the new beam.
<<mutators>>=
	event& beam(const particle&);	

@
\meth{event::target(const particle\& p)}
The [[target]] mutator sets the target of the event to [[p]] and adds [[p]] to the list of initial state particles.  It returns a reference to the [[event]] with the new target.
<<mutators>>=
	event& target(const particle&);	


@
\subsection{Inspectors}
Inspector methods return information about the current state of an [[event]].  They are guaranteed not to change the state of the event, and are declared [[const]] to ensure this.

\vspace{0.5cm}

\meth{event::OK(double epsilon = 1e-6)}
The [[OK]] method checks that both charge and four-momenta are conserved. It returns 1 if event conserves both and 0 if event fails.  The optional argument epsilon is the tolerance on momentum conservation.  The default value is $1 \times 10^-6$ and is used as:
\begin{equation}
	| \sum p_\mu^{initial} - \sum p_\mu^{final} |^2 < \epsilon
\end{equation}
<<inspectors>>=
	int OK(double epsilon) const;	

@
\meth{event::beam()}
The [[beam]] inspector returns the [[particle]] which is the beam.
<<inspectors>>=
	particle beam() const;	

@
\meth{event::target()}
The [[target]] inspector returns the [[particle]] which is the target.
<<inspectors>>=
	particle target() const;	

@
\meth{event::getPartPFinal(string name,int charge,int index,int debug=0)}
[[getPartPFinal]] returns the four momentum of the requested final state particle.  [[name]] refers to the name of the particle as knowm in the [[PDGtable]] (see the documentation for [[particleData]] for details)and [[charge]] is the charge of the particle to look for.  In the common case of having more than one particles with the same name and charge in the event, [[index]] allows specification a particlular one: [[getPartPFinal("pi",-1,2)]] will return the second $\pi^-$ from the list of final state particles.  If no particle can be found matching the requested criteria,  [[getPartPFinal]] throws an exception "PartNotFound".

The optional [[debug]] argument, if set to a non-zero value, enables output tracing the progress of the search for the requested particle.  By default this output is off.
<<inspectors>>=
	fourVec getPartPFinal(std::string name,int charge,int index,int debug=0) const;

@
\meth{event::getPartPInitial(string name,int charge,int index)}
[[getPartPInitial]] behaves exactly as [[getPartPFinal]], but searches the list of initial state particles.  Usually you will want to use the [[beam]] and [[target]] inspectors instead.
<<inspectors>>=
	fourVec getPartPInitial(std::string name,int charge,int index) const;

@
\meth{event::f\_charge()}
[[f_charge]] returns the total charge of the final state.
<<inspectors>>=
	int f_charge() const;

@
\meth{event::f\_mesons()}
[[f_mesons]] returns an {\sc stl} list of all mesons in the final state.
<<inspectors>>=
	std::list<particle> f_mesons() const;

@
\meth{event::f\_baryons()}
[[f_baryons]] returns an {\sc stl} list of all baryons in the final state.
<<inspectors>>=
	std::list<particle> f_baryons() const;

@
\meth{event::f\_particles()}
[[f_particles]] returns an {\sc stl} list of all particles in the final state.
<<inspectors>>=
	std::list<particle> f_particles() const;

@
\meth{event::f\_particle(const string\& name, int charge, int index)}
[[f_particle]] returns a particle from the final state which matches [[name]], [[charge]] and [[index]].  See [[getPartPFinal]] for description of [[index]].  
<<inspectors>>=
	particle f_particle(const std::string& name, int charge, int index) const;

@
\meth{event::i\_charge()}
[[i_charge]] returns the total charge of the initial state.
<<inspectors>>=
	int i_charge() const;

@
\meth{event::i\_mesons()}
[[i_mesons]] returns an {\sc stl} list of all mesons in the initial state.
<<inspectors>>=
	std::list<particle> i_mesons() const;

@
\meth{event::i\_baryons()}
[[i_baryons]] returns an {\sc stl} list of all baryons in the initial state.
<<inspectors>>=
	std::list<particle> i_baryons() const;

@
\meth{event::i\_particles()}
[[i_particles]] returns an {\sc stl} list of all particles in the initial state.
<<inspectors>>=
	std::list<particle> i_particles() const;

@
\meth{event::i\_particle(const string\& name, int charge, int index)}
[[i_particle]] returns a particle from the initial state which matches [[name]], [[charge]] and [[index]].  See [[getPartPFinal]] for description of [[index]].  
<<inspectors>>=
	particle i_particle(const std::string& name, int charge, int index) const;

@
\meth{event::mesonPlane()}
[[mesonPlane]] returns a unit three vector normal to the plane defined by the initial and final state mesons.  If the plane is not defined the method returns a zero vector.  Note that this should properly be called [[bosonPlane]], since photons are treated as mesons.
<<inspectors>>=
	threeVec mesonPlane() const;

@
\meth{event::baryonPlane()}
[[baryonPlane]] returns a unit three vector normal to the plane defined by the initial and final state baryons.  If the plane is not defined the method returns a zero vector.
<<inspectors>>=
	threeVec baryonPlane() const;

@
\subsection{Input and Output}
The input and output of an event is handled by these methods.  The format is currently ascii for all methods, but the [[print]] method produces a slightly more human readable output than the iostream operators.

The output operators are just wrappers for read and write functions.  This allows modifying the behavior of the IO operators through a call to [[setIOversion()]].  The particlular read or write function called depends on the value of [[_ioversion]].

\meth{event::print()}
[[print]] puts an human readable ascii representation of the event onto standard output.
<<i/o methods>>=
	void print() const;

@
\meth{friend istream\& operator$>>$(istream\& is, event\& e)}
<<i/o methods>>=
	friend std::istream& operator>>(std::istream& is, event& e);	

@
\meth{friend ostream\& operator$@<<$(ostream\& os, event\& e)}
<<i/o methods>>=
	friend std::ostream& operator<<(std::ostream& os, event& e);	

@
\meth{istream\& read1(istream\& is)}
The member [[read1]] method reads an event from [[is]] into [[e]].
The format expected (and written by the corresponding [[write1]] method is:
[[
5
1 0 0 0 9 9
8 1 -0.157251 0.064106 5.46359 5.46802
9 -1 -0.232176 -0.473236 2.07585 2.1463
8 1 -0.407259 0.036462 0.72016 0.839893
13 0 0.796686 0.372668 0.740405 1.48406
]]
where the initial 5 is the number of particles (lines) to follow.  Each particle on successive lines is specified by a {\sc geant} id, a charge, $p_x$, $p_y$, $p_z$, and $E$.  The first particle is assummed to be the beam, and the remaining lines are final state particles.  The target is always assumed to be a proton a rest.
<<i/o methods>>=
	std::istream& read1(std::istream& is);	

@
\meth{ostream\& write1(ostream\& os)}
The member [[write1]] method writes events in the format described above which can be read by the [[read1]] method.
<<i/o methods>>=
	std::ostream& write1(std::ostream& os);	

@
\meth{istream\& read2(istream\& is)}
The [[read1]] format above proved too constrictive for general use.  The new format is more general and does not assume the beam is the first particle and the target is a proton.
An example of the format is:
[[
T 14 1  0.93827   0.000000  0.000000  0.000000  
F 13 0  1.48406   0.796686  0.372668  0.740405  
F 8  1  0.839893 -0.407259  0.036462  0.72016   
F 9 -1  2.1463   -0.232176 -0.473236  2.07585   
B 1  0  9.00000   0.000000  0.000000  9.000000  
E
]]
Each line begins with a character to identify the line: [[I]] is an [[I]]nitial state particle, [[F]] is a [[F]]inal state particle, [[B]] is the [[B]]eam, [[T]] is the [[T]]arget, and [[E]] is the [[E]]nd of the event.  The initial and final state particles are described as follows: Tag GeantID Charge $p_0$(Energy) $p_x$ $p_y$ $p_z$.  
<<i/o methods>>=
	std::istream& read2(std::istream& is);

@
\meth{ostream\& write2(ostream\& os)}
The member [[write2]] method writes events in the format described above which can be read by the [[read2]] method.
<<i/o methods>>=
	std::ostream& write2(std::ostream& os);

@
\meth{event\& setIOVersion(int ver)}
[[setIOVersion()]] modifies the behavior of the output operators.  Currently known versions are 1 and 2.
<<i/o methods>>=
	event& setIOVersion(int ver);

@
\subsection{Friends}

@
\meth{friend event operator*(const lorentzTransform\&,const event\&)}
The lorentz transformation of an entire event is done with a friend operator [[event operator*(lorentzTransform,const event&)]]. Thus to boost an event you can write
[[
	lorentzTransform L;
	event e;
	
	e = L*e;
]]

<<friends>>=
	friend event operator*(const lorentzTransform&,const event&);
	 
@
\section{The Private event}
Privately, an [[event]] manages the lists of particles using {\sc STL} lists, [[_initial]] and [[_final]].  [[_beam]] and [[_target]] keep track of which of the initial state particles were each.



<<event.h>>=
#ifndef EVENT_H
#define EVENT_H

#include <string>
#include <list>
#include <pputil.h>
#include <Vec.h>
#include <lorentz.h>
#include <particle.h>
	
	extern particleDataTable PDGtable;
	
	class particle;
	class event {
		protected:
			std::list<particle> _initial;
			std::list<particle> _final;
			particle* _beam;
			particle* _target;
			int _ioversion;
		public:
			<<public declarations>>
	};
	
#endif

@
\section{Impelmentation of the methods}
The code for [[event]] methods is in [[event.cc]]

<<event.cc>>=
#include <event.h>
	using std::list;
	using std::string;
	using std::cout;
	using std::endl;
	using std::ostream;
	using std::istream;
	<<constructor code>>
	<<mutator code>>
	<<inspector code>>
	<<i/o code>>
	<<friend code>>

@
\subsection{Constructors}
The default constructor simply nulls the beam and target pointers.
<<constructor code>>=
	event::event() {
		this->_beam = NULL;
		this->_target = NULL;
		this->_ioversion = 1;
	}

@
If the beam and target pointers are set, delete them in the destructor.
<<constructor code>>=
	event::~event() {
		if (this->_beam) delete this->_beam;
		if (this->_target) delete this->_target;
	}

@
The copy constructor uses the {\sc stl} list assignment operator to copy the initial and final lists.  The [[_beam]] and [[_target]] are created with a call to new.
<<constructor code>>=
	event::event(const event& e) {
		this->_final = e._final;
		this->_initial = e._initial;
		this->_beam = new particle(*e._beam);
		this->_target = new particle(*e._target);
		this->_ioversion = e._ioversion;
	}

@
The asignment operator works very similar to the copy constructor, but we must check first if the [[_beam]] and [[_target]] have been previously set.
<<constructor code>>=
	event& event::operator=(const event& e) {
		this->_final = e._final;
		this->_initial = e._initial;
		if (this->_beam) delete this->_beam;
		this->_beam = new particle(*e._beam);
		if (this->_target) delete this->_target;
		this->_target = new particle(*e._target);
		this->_ioversion = e._ioversion;
		return *this;
	}

@
\subsection{Mutators}
[[addfinal]] and [[addinitial]] push the particle [[p]] onto the appropriate list.
<<mutator code>>=
	event& event::addfinal(const particle& p) {
		this->_final.push_back(p);
		return *this;
	}
		
<<mutator code>>=
	event& event::addinitial(const particle& p) {
		this->_initial.push_back(p);
		return *this;
	}

@
[[erase]] uses the {\sc stl} erase method to empty the lists if they are not already so.
<<mutator code>>=
	event& event::erase() {
		if( !_initial.empty() ) {
			_initial.erase(_initial.begin(),_initial.end());
		}
		if( !_final.empty() ) {
			_final.erase(_final.begin(),_final.end());
		}
		return *this;
	}

@
The [[beam]] and [[target]] mutators add [[p]] to the list [[_initial]] and create a new particle to point the appropriate pointer at.	
<<mutator code>>=
	event& event::beam(const particle& p) {
		this->_initial.push_front(p);
		if (this->_beam) {
			*(this->_beam) = p;
		}
		else {
			this->_beam = new particle(p);
		}
		return *this;
	}
	
<<mutator code>>=
	event& event::target(const particle& p) {
		this->_initial.push_back(p);
		if (this->_target) {
			*(this->_target) = p;
		}
		else {
			this->_target = new particle(p);
		}
		return *this;
	}

@
\subsection{Inspectors}

<<inspector code>>=
	int event::OK(double epsilon = 1e-6) const {
		list<particle>::const_iterator p;
		int q_initial = 0;
		int q_final = 0;
		fourVec p_initial, p_final;
		int q_conserved, p_conserved;

		p = this->_initial.begin();
		while ( p != this->_initial.end() ) {
			q_initial += p->Charge();
			p_initial += p->get4P();
			p++;
		}
		p = this->_final.begin();
		while ( p != this->_final.end() ) {
			q_final += p->Charge();
			p_final += p->get4P();
			p++;
		}
		q_conserved = q_initial == q_final;
		p_conserved = (p_initial - p_final).lenSq() < epsilon;
		
		return(q_conserved && p_conserved);
	}
@
The [[beam]] and [[target]] inspectors return the four-momenta of their respective particles.
<<inspector code>>=
	particle event::beam() const{
		return ( *(this->_beam) );
	}
	
<<inspector code>>=
	particle event::target() const{
		return ( *(this->_target) );
	}

<<inspector code>>=
	fourVec event::getPartPFinal(string name,int charge,int index,int debug) const {
		int i = 0;
		if (debug) {
			cout << "Looking for " << name << charge << "[" << index << "] in event" << endl;
		}
		list<particle>::const_iterator p = this->_final.begin();
		while (p != this->_final.end() ) {
			if (debug) {
				cout << "checking against " << p->Name() << p->Charge() << endl;
			}
			if ( p->Name() == name && p->Charge() == charge ) {
				i++;
				if (debug) {
					cout << "found one" << endl;
					cout << "checking against index " << i << endl;
				}
				if ( i == index ) {
					if (debug) {
						cout << "found the right one, getting 4p" << endl;
						cout << "4p:" << endl;
						p->get4P().print();
					}
					return p->get4P();
				}
			}
			p++;
		}
		throw("PartNotFound");
		return(fourVec(0,threeVec(0,0,0)));
	}

<<inspector code>>=
	fourVec event::getPartPInitial(string name,int charge,int index) const {
		int i = 1;
		list<particle>::const_iterator p = this->_initial.begin();
		while (p != this->_initial.end() ) {
			if ( p->Name() == name && i++ == index ) {
				return p->get4P();
			}
		}
		throw("PartNotFound");
		return(fourVec(0,threeVec(0,0,0)));
	}

@
<<inspector code>>=
	int event::f_charge() const{
		int q = 0;
		list<particle>::const_iterator p = _final.begin();
		
		while( p != _final.end() ) {
			q += p->Charge();
			p++;
		}
		return ( q );
	}

@
To distinguish mesons, we check if the spin (in units of $\hbar/2$) is even by requiring $J \bmod 2 = 0$.  The baryon case is similar except we require $J \bmod 2 = 1$
<<inspector code>>=
	list<particle> event::f_mesons() const{
		list<particle> l;
		list<particle>::const_iterator p = _final.begin();
		
		while( p != _final.end() ) {
			if ( p->J()%2 == 0 ) {
				l.push_back(*p);
			}
			p++;
		}
		return ( l );
	}

<<inspector code>>=
	list<particle> event::f_baryons() const{
		list<particle> l;
		list<particle>::const_iterator p = _final.begin();
		
		while( p != _final.end() ) {
			if ( p->J()%2 == 1 ) {
				l.push_back(*p);
			}
			p++;
		}
		return ( l );
	}
@
<<inspector code>>=
	list<particle> event::f_particles() const{
		return ( _final );
	}


@
<<inspector code>>=
	particle event::f_particle(const string& name, int charge, int index) const{
		int i = 0;

		list<particle>::const_iterator p = this->_final.begin();
		while (p != this->_final.end() ) {
			if ( p->Name() == name && p->Charge() == charge ) {
				i++;
				if ( i == index ) {
					return *p;
				}
			}
			p++;
		}
		throw("PartNotFound");
	}

@
<<inspector code>>=
	int event::i_charge() const{
		int q = 0;
		list<particle>::const_iterator p = _initial.begin();
		
		while( p != _initial.end() ) {
			q += p->Charge();
			p++;
		}
		return ( q );
	}

@
To distinguish mesons, we check if the spin (in units of $\hbar/2$) is even by requiring $J \bmod 2 = 0$.  The baryon case is similar except we require $J \bmod 2 = 1$
<<inspector code>>=
	list<particle> event::i_mesons() const{
		list<particle> l;
		list<particle>::const_iterator p = _initial.begin();
		
		while( p != _initial.end() ) {
			if ( p->J()%2 == 0 ) {
				l.push_back(*p);
			}
			p++;
		}
		return ( l );
	}

<<inspector code>>=
	list<particle> event::i_baryons() const{
		list<particle> l;
		list<particle>::const_iterator p = _initial.begin();
		
		while( p != _initial.end() ) {
			if ( p->J()%2 == 1 ) {
				l.push_back(*p);
			}
			p++;
		}
		return ( l );
	}
@
<<inspector code>>=
	list<particle> event::i_particles() const{
		return ( _initial );
	}


@
<<inspector code>>=
	particle event::i_particle(const string& name, int charge, int index) const{
		int i = 0;

		list<particle>::const_iterator p = this->_initial.begin();
		while (p != this->_initial.end() ) {
			if ( p->Name() == name && p->Charge() == charge ) {
				i++;
				if ( i == index ) {
					return *p;
				}
			}
			p++;
		}
		throw("PartNotFound");
	}

@
<<inspector code>>=
	threeVec event::mesonPlane() const {
		threeVec A,C,N;
		list<particle> i,f;
		list<particle>::const_iterator ip,fp;
		
		i = this->i_mesons();
		ip = i.begin();
		while (ip != i.end()) {
			A += ip->get3P();
			ip++;
		}

		f = this->f_mesons();
		fp = f.begin();
		while (fp != f.end()) {
			C += fp->get3P();
			fp++;
		}
		
		if ( (A < threeVec(1e-4,0,0)) || (C < threeVec(1e-4,0,0)) )
			return threeVec(0,0,0);
		
		N = A / C;
		N *= (1/N.len());
		
		return N;
	}

@
<<inspector code>>=
	threeVec event::baryonPlane() const {
		threeVec B,D,N;
		list<particle> i,f;
		list<particle>::const_iterator ip,fp;
		
		i = this->i_baryons();
		ip = i.begin();
		while (ip != i.end()) {
			B += ip->get3P();
			ip++;
		}

		f = this->f_baryons();
		fp = f.begin();
		while (fp != f.end()) {
			D += fp->get3P();
			fp++;
		}
		
		if ( (B < threeVec(1e-4,0,0)) || (D < threeVec(1e-4,0,0)) )
			return threeVec(0,0,0);
		
		N = B / D;
		N *= (1/N.len());
		
		return N;
	}

@
\subsection{Input and Output}

<<i/o code>>=
	void event::print() const {
		cout << "beam: ";
		this->_beam->get4P().print();
		cout << "target: ";
		this->_target->get4P().print();
		cout << "final particles: ";
		cout << endl;
		list<particle>::const_iterator p = this->_final.begin();
		while( p != this->_final.end() ) {
			p->print();
			p++;
		}
	}

<<i/o code>>=
	ostream& operator<<(ostream& os, event& e) {
		switch (e._ioversion) {
			case 1:
				return e.write1(os);
				break;
			case 2:
				return e.write2(os);
				break;
			default:
				throw("badIOVersion");
		}
	}

<<i/o code>>=
	istream& operator>>(istream& is, event& e) {
		switch (e._ioversion) {
			case 1:
				return e.read1(is);
				break;
			case 2:
				return e.read2(is);
				break;
			default:
				throw("badIOVersion");
		}
	}

<<i/o code>>=
	ostream& event::write2(ostream& os) {
		fourVec v = this->beam().get4P();
		os << "B " << name2id(this->_beam->Name(),this->_beam->Charge()) << " " 
			<< this->_beam->Charge() << " " 
			<< v.t() << " "
			<< v.x() << " " << v.y() << " " << v.z() << " " 
			<< endl;
		v = this->target().get4P();
		os << "T " << name2id(this->_target->Name(),this->_target->Charge()) << " " 
			<< this->_target->Charge() << " " 
			<< v.t() << " "
			<< v.x() << " " << v.y() << " " << v.z() << " " 
			<< endl;
		list<particle>::iterator part = this->_final.begin();
		while (part != this->_final.end()) {
			v = part->get4P();
			os << "F " << name2id(part->Name(),part->Charge()) << " "
				<< part->Charge() << " "
				<< v.t() << " "
				<< v.x() << " " << v.y() << " " << v.z() << " "
				<< endl;
			part++;
		}
		os << "E" << endl;
		return os;
	}

<<i/o code>>=
	istream& event::read2(istream& is) {
		int ptype, q;
		double px, py, pz, t;
		string name;
		
		char Tag = 0;
		this->erase();
		while( !(is >> Tag).eof() ) {
			switch (Tag) {
				case 'I':{
					is >> ptype >> q >> t >> px >> py >> pz;
					name = id2name( (Geant_ID) ptype );
					particle part(PDGtable.get(name),q);
					part.set4P(fourVec(t,threeVec(px,py,pz)));
					this->addinitial(part);
					}
					break;
				case 'F': {
					is >> ptype >> q >> t >> px >> py >> pz;
					name = id2name( (Geant_ID) ptype );
					particle part(PDGtable.get(name),q);
					part.set4P(fourVec(t,threeVec(px,py,pz)));
					this->addfinal(part);
					}
					break;
				case 'B': {
					is >> ptype >> q >> t >> px >> py >> pz;
					name = id2name( (Geant_ID) ptype );
					particle part(PDGtable.get(name),q);
					part.set4P(fourVec(t,threeVec(px,py,pz)));
					this->beam(part);
					}
					break;
				case 'T': {
					is >> ptype >> q >> t >> px >> py >> pz;
					name = id2name( (Geant_ID) ptype );
					particle part(PDGtable.get(name),q);
					part.set4P(fourVec(t,threeVec(px,py,pz)));
					this->target(part);
					}
					break;
				case 'E':
					return is;
			}
		}
		return is;
	}

<<i/o code>>=
	ostream& event::write1(ostream& os) {
		os << this->_final.size()+1 << endl;
		fourVec v = this->beam().get4P();
		os << name2id(this->_beam->Name(),this->_beam->Charge()) << " " 
			<< this->_beam->Charge() << " " 
			<< v.x() << " " << v.y() << " " << v.z() << " " 
			<< v.t() << endl;
		list<particle>::iterator part = this->_final.begin();
		while (part != this->_final.end()) {
			v = part->get4P();
			os << name2id(part->Name(),part->Charge()) << " "
				<< part->Charge() << " "
				<< v.x() << " " << v.y() << " " << v.z() << " "
				<< v.t() << endl;
			part++;
		}
		return os;
	}

<<i/o code>>=
	istream& event::read1(istream& is) {
		int nparticles = 0;
		int ptype, q;
		double px, py, pz, t;
		string name;
		
		this->erase();
		
		particle Target(PDGtable.get("p"),1);
		Target.set4P(fourVec(Target.Mass(),threeVec(0,0,0)));
		this->target(Target);
		
		is >> nparticles;
		for (int i = 0; i < nparticles; i++ ) {
			is >> ptype >> q >> px >> py >> pz >> t;
			name = id2name( (Geant_ID) ptype );
			if ( i==0 ) {
				particle Beam(PDGtable.get(name),q);
				Beam.set4P(fourVec(t,threeVec(px,py,pz)));
				this->beam(Beam);
			}
			else {
				particle part(PDGtable.get(name),q);
				part.set4P(fourVec(t,threeVec(px,py,pz)));
				this->addfinal(part);
			}
		}
		return is;
	}
		
<<i/o code>>=
	event& event::setIOVersion(int ver) {
		if (ver >= 1 && ver <= 2) {
			this->_ioversion = ver;
		}
		else {
			cerr << "unknown io version " << ver << endl;
			throw ("UnknownIOVersion");
		}
		return *this;
	}

@
\subsection{Friend code}

<<friend code>>=
	event operator*(const lorentzTransform& L,const event& e) {
		event r;
		
		list<particle>::const_iterator p;
		
		r.beam(L*e.beam());
		r.target(L*e.target());
		
		p = e._initial.begin();
		while (p != e._initial.end()) {
			r.addinitial(L*(*p));
			p++;
		}
	
		p = e._final.begin();
		while (p != e._final.end()) {
			r.addfinal(L*(*p));
			p++;
		}
	
		return r;
	}
