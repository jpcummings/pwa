@
\def\CC{{C\nolinebreak[4]\hspace{-.05em}\raisebox{.4ex}{\tiny\bf ++}}}
\section{particleData Class}
The [[particleData]] class is meant to represent essentially the same
information as the Particle Data Table of the Particle Data Group, and
in fact will be used as an element in a list that we call a
[[particleDataTable]].  Presently, a [[particleData]] contains no
information about decay modes or branching ratios, it has only a name,
mass, total width and the quantum numbers of the state.  {\em All of
the quantum numbers associated with angular momentum are given in units
of $\hbar/2$ .}

In addition to the private data members this class has a private
[[_init(...)]] method which is called by the public methods with the
appropriate arguments.

<<particleData.h>>=
#ifndef __PARTICLEDATA_H_
#define __PARTICLEDATA_H_

#include <string>
#include <iostream>
#include <fstream>
#include <cstdlib>
#include <pputil.h>
#define getsign(x) (((x)>0)?"+":"-")

	<<particleData declaration>>
	<<tableEntry declaration>>
	<<particleDataTable declaration>>
#endif


<<particleData declaration>>=
class particleData {
	private:
		static int _particle_data_count;
		static int _particle_data_debug;
		std::string _name;
		double _mass;
		double _width;
		int _isospin;
		int _gparity;
		int _spin;
		int _parity;
		int _cparity;

		void _init(std::string, double, double, int, int, int, int, int);

	public:
		<<particleData method declarations>>

};

@
In the following declarations of [[particleData]] methods, some of the more
simple ones are defined inline,  the remaining methods have there
definition in [[partcileData.cc]].  [[OK()]] simply
tests the validity of the [[particleData]] object, looking for internal
inconsistancies.

<<particleData method declarations>>=
	particleData();
	particleData(const particleData&);
	particleData(std::string n,double m, double w, int i, int g, int j, int p, int c);
	~particleData();
	int OK() const;

@
Although this is generally considered poor \CC , I define mutators to
set all the private data members.  This essentially ``opens up'' our
representation to the public, but I don't really see a better was right
now.

<<particleData method declarations>>=
	particleData& setName(std::string);

	particleData& setMass(double m) {
		this->_mass = m; 
		return(*this);
	}

	particleData& setWidth(double w) {
		this->_width = w; 
		return(*this);
	}

	particleData& setI(int i) {
		this->_isospin = i;
		return(*this);
	}

	particleData& setG(int g) {
		this->_gparity = g;
		return(*this);
	}

	particleData& setJ(int j) {
		this->_spin = j;
		return(*this);
	}

	particleData& setP(int p) {
		this->_parity = p;
		return(*this);
	}

	particleData& setC(int c) {
		this->_cparity = c;
		return(*this);
	}

	std::string Name() const;

	double Mass() const{
		return(this->_mass);
	}

	double Width() const {
		return(this->_width);
	}

	int I() const {
		return(this->_isospin);
	}

	int G() const {
		return(this->_gparity);
	}

	int J() const {
		return(this->_spin);
	}

	int P() const {
		return(this->_parity);
	}

	int C() const {
		return(this->_cparity);
	}

	void print() const;
	void dump() const;
	
	particleData& operator=(const particleData&);
	
	void debug(int d = 1) {
		_particle_data_debug = d;
	}
	
	friend std::ostream & operator << (std::ostream &, particleData &);

@ The code for the non-trivial methods is put into
[[particleData.cc]].  Since [[_particle_data_debug]]  and
[[_particle_data_count]] are {\em declared} static in class
[[particleData]], we must {\em define } them both here.
The [[PDGtable]] is declared here to allow users to declare an [[extern PDGtable]].  The table must be initialized by the user, and then all routines will use the same table.

<<particleData.cc>>=
#include <particleData.h>
	<<namespace declarations>>
	int particleData::_particle_data_debug = 0;
	int particleData::_particle_data_count = 0;
	particleDataTable PDGtable;
	<<particleData Methods>>

<<namespace declarations>>=
	using std::string;
	using std::ifstream;
	using std::cout;
	using std::cerr;
	using std::endl;


@ The [[_init(...)]] function is a private method that sets up a
[[particleData]] given values for all its data members. If the name
argument is non-NULL, space is allocated for the name.
<<particleData Methods>>=
	void particleData::_init(string nm,double m,double w,int i,int g,int j,int p,int c) {
		_name = nm;
		_mass = m;
		_width = w;
		_isospin = i;
		_gparity = g;
		_spin = j;
		_parity = p;
		_cparity = c;
	}

@ The constructors (and [[operator=]]) all call [[_init(...)]] with the proper arguments:
<<particleData Methods>>=
	particleData::particleData() {
		_particle_data_count++;
		if (_particle_data_debug) { 
			cerr << "in particleData(" << this << ")::particleData()\t_particle_data_count = " << _particle_data_count << endl;
		}
		_init("",0.0,0.0,0,0,0,0,0);
	}

	particleData::particleData(const particleData& p) {
		_particle_data_count++;
		if (_particle_data_debug){ 
			cerr << "in particleData(" << this << ")::particleData(const particleData& p=" << p.Name() << ")\t_particle_data_count = " << _particle_data_count << endl;
		}
		_init(p._name,p._mass,p._width,p._isospin,p._gparity,p._spin,p._parity,p._cparity);
	}

	particleData::particleData(string n,double m, double w, int i, int g, int j, int p, int c) {
		_particle_data_count++;
		if (_particle_data_debug) { 
			cerr << "in particleData(" << this << ")::particleData(string ,double, double, int, int, int, int, int)\t_particle_data_count = " << _particle_data_count << endl;
		}
		_init(n, m, w, i, g, j, p, c);
	}

	particleData& particleData::operator=(const particleData& p) {
		if (_particle_data_debug) { 
			cerr << "in particleData(" << this << ")::operator=(const particleData&(" << &p << ")=" << p.Name() << ")\t_particle_data_count = " << _particle_data_count << endl;
		}
		_init(p._name,p._mass,p._width,p._isospin,p._gparity,p._spin,p._parity,p._cparity);
		return(*this);
	}

@ The destructor simply frees up the memory allocated for [[_name]], if [[_name]] is non-[[NULL]]
<<particleData Methods>>=
	particleData::~particleData() {
		_particle_data_count--;
		if (_particle_data_debug) { 
			cerr << "in particleData(" << this << ")=" << this->Name() << ")::~particleData()\t_particle_data_count = " << _particle_data_count << endl;
		}
	}

@ The [[Name()]] inspector allocates space for a copy of [[_name]] and returns a pointer to this copy.
<<particleData Methods>>=
	string particleData::Name() const {
		return(this->_name);
	}

@ [[setName()]] uses [[realloc]] to make sure there is enough room for the name before setting it.
<<particleData Methods>>=
	particleData& particleData::setName(string nm) {
		this->_name = nm;
		return(*this);
	}

	void particleData::print() const {
		ptab();
		cout << this->_name << ":\tmass=" << this->_mass << "\twidth=" << this->_width;
		cout << "\t" << this->_isospin << getsign(this->_gparity);
		cout << "(" << this->_spin << getsign(this->_parity) << getsign(this->_cparity) << ")";
		cout << endl;
	}

	void particleData::dump() const {
		cout << this->_name << "\t" \
			<< this->_mass << "\t" \
			<< this->_width << "\t" \
			<< this->_isospin << "\t" \
			<< this->_gparity << "\t" \
			<< this->_spin << "\t" \
			<< this->_parity << "\t" 
			<< this->_cparity << endl;
	}


@
\section{The Particle Data Table: A list of particleDatas}

@
To use a list of [[particleData]]'s as our [[particleDataTable]], I
define a list entry called [[tableEntry]].

<<tableEntry declaration>>=
	class tableEntry {
	
	private:
		particleData particle;
		tableEntry  *nextparticle;
	
		void _init(const particleData& p, tableEntry *n);
	
	public:
		tableEntry(particleData p, tableEntry *n);
		tableEntry(const tableEntry& te);
		~tableEntry();
	
		tableEntry& operator=(const tableEntry& te);
	
		tableEntry* next() const;
		particleData Particle() const;
		void print() const;
		void dump() const;
	};

@ The code for the non-trivial methods is also put into [[particleData.cc]].
<<particleData.cc>>=
	<<tableEntry Methods>>

@ The private [[_init(...)]] takes care of the initialization.
<<tableEntry Methods>>=
	void tableEntry::_init(const particleData& p, tableEntry *n) {
		particle = p; 
		nextparticle = n;
	}

@ And all the constructors call [[_init(...)]]:
<<tableEntry Methods>>=
	tableEntry::tableEntry(particleData p, tableEntry *n) {
		_init(p,n);
	}
	
	tableEntry::tableEntry(const tableEntry& te) {
		_init(te.particle,te.nextparticle);
	}

	tableEntry::~tableEntry() {
		;
	}
	
	tableEntry& tableEntry::operator=(const tableEntry& te) {
		_init(te.particle,te.nextparticle);
		return(*this);
	}

@ tableEntry must have a way to get at the [[particleData]], this node entry,
<<tableEntry Methods>>=
	particleData tableEntry::Particle() const {
		return (particle);
	}

@ and a way to get at the next entry
<<tableEntry Methods>>=
	tableEntry* tableEntry::next() const {
		return nextparticle;
	}

	void tableEntry::print() const {
		particle.print();
	}

	void tableEntry::dump() const {
		particle.dump();
	}


@
And finally, I use all this in a [[particleDataTable]], which is a
simple little list.  Right now it can be initialized with some default
values that are coded into [[particleData.cc]].  These defaults are
very incoomplete and right now are pretty much just for testing.  The
list can also be initialized from a file, which is the recommended
way.  The format of the file can be seen from the example in
Figure~\ref{pdtfile}
\begin{figure}[htbp]
\begin{center}
\begin{verbatim}
pi          0.1395699	0         2 -1  0 -1  1
pi0         0.1349764	0         2 -1  0 -1  1
eta         0.54745     0.0000012 0  1  0 -1  1
rho(770)    0.7699      0.1512    2  1  2 -1 -1
omega(782)  0.78194     0.00843   0 -1  2 -1 -1
\end{verbatim}
\caption{Example piece of a data file to initialize a [[PartcileDataTable]]. The entries on a line are: name, mass, width, isospin, $G$-parity, spin, parity, and $C$-parity.  Fields may be separated by any whitespace except a newline, which separates particles.}
\label{pdtfile}
\end{center}
\end{figure}

<<particleDataTable declaration>>=
	class particleDataTable {
	
	private:
		tableEntry *head;
	
	public:
		particleDataTable( tableEntry *p = NULL );
	
		void initialize();
		void initialize(char* PDTfile);
		void insert(particleData p);
	
		particleData get(std::string _name) const;
		double mass(std::string _name) const;
		double width(std::string _name) const;
		int ListLen() const;
		char** List() const;
		void print() const;
		void dump() const;
	};
	
@ The methods for particleDataTable are also defined in [[particleData.cc]]
<<particleData.cc>>=
	<<particleDataTable methods>>

@ Although the only constructor has one argument, (the head of the
table)  the argument has a default value of NULL and thus acts as a default
constructor.
<<particleDataTable methods>>=
	particleDataTable::particleDataTable( tableEntry *p ) {
		head = p;
	}

@ This is the default initialization of the list, values from 2000 PGD, except for: $a_0(980)$ - e852 values.
<<particleDataTable methods>>=
	void particleDataTable::initialize() {
		insert( particleData("e",0.00051,0.0,1,0,1,+1,0));
		insert( particleData("gamma",0.0,0,0,0,2,-1,-1));
		insert( particleData("pi",0.13957018,0,2,-1,0,-1,1));
		insert(particleData("pi0",0.1349766,0,2,-1,0,-1,1));
		insert(particleData("eta",0.54730,0.00000118,0,1,0,-1,1));
		insert(particleData("sigma",0.800,0.800,0,1,0,1,1));
		insert(particleData("rho(770)",0.7693,0.1502,2,1,2,-1,-1));
		insert(particleData("omega(782)",0.78257,0.00844,0,-1,2,-1,-1));
		insert(particleData("eta'(958)",0.95778,0.000202,0,1,0,-1,1));
		insert(particleData("f0(980)",0.980,0.070,0,1,0,1,1));
		insert(particleData("a0(980)",0.9931,0.071,2,-1,0,1,1));
		insert(particleData("phi(1020)",1.019417,0.004468,0,-1,2,-1,-1));
		insert(particleData("h1(1170)",1.170,0.360,0,-1,2,1,-1));
		insert(particleData("b1(1235)",1.229,0.142,2,1,2,1,-1));
		insert(particleData("a1(1269)",1.230,0.425,2,-1,2,1,1));
		insert(particleData("f2(1270)",1.2754,0.1851,0,1,4,1,1));
		insert(particleData("f1(1285)",1.2819,0.024,0,1,2,1,1));
		insert(particleData("eta(1295)",1.297,0.053,0,1,0,-1,1));
		insert(particleData("pi(1300)",1.300,0.400,2,-1,0,-1,1));
		insert(particleData("a2(1320)",1.318,0.107,2,-1,4,1,1));
		insert(particleData("f0(1370)",1.350,0.350,0,1,0,1,1));
		insert(particleData("f1(1420)",1.4263,0.0555,0,1,2,1,1));
		insert(particleData("omega(1420)",1.419,0.174,0,-1,2,-1,-1));
		insert(particleData("eta(1440)",1.420,0.060,0,1,0,-1,1));
		insert(particleData("etaL(1405)",1.405,0.056,0,1,0,-1,1));
		insert(particleData("etaH(1475)",1.475,0.081,0,1,0,-1,1));
		insert(particleData("a0(1450)",1.474,0.265,2,-1,0,1,1));
		insert(particleData("rho(1450)",1.465,0.310,2,1,2,-1,-1));
		insert(particleData("f0(1500)",1.500,0.112,0,1,0,1,1));
		insert(particleData("f1(1510)",1.510,0.073,0,1,2,1,1));
		insert(particleData("f2'(1525)",1.525,0.076,0,1,4,1,1));
		insert(particleData("omega(1650)",1.649,0.220,0,-1,2,-1,-1));
		insert(particleData("omega3(1670)",1.667,0.168,0,-1,6,-1,-1));
		insert(particleData("pi2(1670)",1.670,0.259,2,-1,4,-1,1));
		insert(particleData("phi(1680)",1.680,0.150,0,-1,2,-1,-1));
		insert(particleData("rho3(1690)",1.691,0.161,2,1,6,-1,-1));
		insert(particleData("rho(1700)",1.700,0.240,2,1,2,-1,-1));
		insert(particleData("f0(1700)",1.715,0.125,0,1,0,1,1));
		insert(particleData("pi(1800)",1.801,0.210,2,-1,0,-1,1));
		insert(particleData("phi3(1850)",1.854,0.087,0,-1,6,-1,-1));
		insert(particleData("f2(2010)",2.011,0.202,0,1,4,1,1));
		insert(particleData("a4(2040)",2.014,0.361,2,-1,8,1,1));
		insert(particleData("f4(2050)",2.034,0.222,0,1,8,1,1));
		insert(particleData("f2(2300)",2.297,0.149,0,1,4,1,1));
		insert(particleData("f2(2340)",2.339,0.319,0,1,4,1,1));

		insert(particleData("K",0.493677,0.0,1,0,0,-1,0));
		insert(particleData("K0",0.497672,0.0,1,0,0,-1,0));
		insert(particleData("Kstar(892)",0.89166,0.0508,1,0,2,-1,0));
		insert(particleData("Kstar(892)0",0.8961,0.0507,1,0,2,-1,0));
		insert(particleData("K1(1270)",1.273,0.090,1,0,2,1,0));
		insert(particleData("K1(1400)",1.402,0.174,1,0,2,1,0));
		insert(particleData("Kstar(1410)",1.414,0.232,1,0,2,-1,0));
		insert(particleData("Kstar0(1430)",1.412,0.294,1,0,0,+1,0));
		insert(particleData("Kstar2(1430)",1.4256,0.0985,1,0,4,+1,0));
		insert(particleData("Kstar2(1430)0",1.4324,0.109,1,0,4,+1,0));
		insert(particleData("Kstar(1680)",1.717,0.322,1,0,2,-1,0));
		insert(particleData("K2(1770)",1.773,0.186,1,0,4,-1,0));
		insert(particleData("Kstar3(1780)",1.776,0.159,1,0,6,-1,0));
		insert(particleData("K2(1820)",1.816,0.276,1,0,4,-1,0));
		insert(particleData("Kstar4(2045)",2.045,0.198,1,0,8,+1,0));

		insert(particleData("p",0.938272,0.0,1,0,1,+1,0));
		insert(particleData("pbar",0.938272,0.0,1,0,1,+1,0));
		insert(particleData("n",0.93956533,0.0,1,0,1,+1,0));
		insert(particleData("d",1.875612762,0.0,0,1,0,1,1));
		insert(particleData("N(1440)",1.440,0.350,1,0,1,+1,0));
		insert(particleData("N(1520)",1.520,0.120,1,0,3,-1,0));
		insert(particleData("N(1535)",1.535,0.150,1,0,1,-1,0));
		insert(particleData("N(1650)",1.650,0.150,1,0,1,-1,0));
		insert(particleData("N(1675)",1.675,0.150,1,0,5,-1,0));
		insert(particleData("N(1680)",1.680,0.130,1,0,5,+1,0));
		insert(particleData("N(1700)",1.700,0.100,1,0,3,-1,0));
		insert(particleData("N(1710)",1.710,0.100,1,0,1,+1,0));
		insert(particleData("N(1720)",1.720,0.150,1,0,3,+1,0));
		insert(particleData("N(2190)",2.190,0.450,1,0,7,-1,0));
		insert(particleData("N(2220)",2.220,0.400,1,0,9,+1,0));
		insert(particleData("N(2250)",2.250,0.400,1,0,9,-1,0));
		insert(particleData("N(2600)",2.600,0.650,1,0,11,-1,0));


		insert(particleData("Delta(1232)",1.232,0.120,3,0,3,+1,0));
		insert(particleData("Delta(1600)",1.600,0.350,3,0,3,+1,0));
		insert(particleData("Delta(1620)",1.600,0.150,3,0,1,-1,0));
		insert(particleData("Delta(1700)",1.600,0.300,3,0,3,-1,0));
		insert(particleData("Delta(1905)",1.905,0.350,3,0,5,+1,0));
		insert(particleData("Delta(1910)",1.910,0.250,3,0,1,+1,0));
		insert(particleData("Delta(1920)",1.920,0.200,3,0,3,+1,0));
		insert(particleData("Delta(1930)",1.930,0.350,3,0,5,-1,0));
		insert(particleData("Delta(1950)",1.950,0.300,3,0,7,+1,0));
		insert(particleData("Delta(2420)",2.420,0.400,3,0,11,+1,0));


		insert(particleData("lambda",1.115684,0.0,0,0,1,+1,0));
	}

@ and while it should be expanded, the table should really be initialized from a file:
<<particleDataTable methods>>=
	void particleDataTable::initialize(char* PDTfile) {
		string name;
		double mass, width;
		int isospin, gparity, spin, parity,cparity;
		ifstream ifs(PDTfile);
	
		while ( !(ifs >> name).eof() ) {
			ifs >> mass;
			ifs >> width;
			ifs >> isospin;
			ifs >> gparity;
			ifs >> spin;
			ifs >> parity;
			ifs >> cparity;
			insert(particleData(name,mass,width,isospin,gparity,spin,parity,cparity));
		}
	
	}

@ This inserts a [[particleData]] into the table
<<particleDataTable methods>>=
	void particleDataTable::insert(particleData p) {
		head = new tableEntry( p, head );
	}

@ Display is provided by the [[print()]] method, which traverses the list printing each entry.
<<particleDataTable methods>>=
	void particleDataTable::print() const {
		tableEntry *te = this->head;
		while(te!=NULL) {
			te->print();
			te = te->next();
		}
	}

@ [[dump()]] puts the table onto standard output in a machine
readable form, useful as a starting point for a file to be read by
[[initialize(char* PDTfile)]].
<<particleDataTable methods>>=
	void particleDataTable::dump() const {
		tableEntry *te = this->head;
		while(te!=NULL) {
			te->dump();
			te = te->next();
		}
	}

@ [[ListLen()]] and [[List()]], while probobly useful anywhere, were written to assist in the interface of the table with the [[yacc]] parser for [[Wave]]'s~\cite{pwacode}.  [[ListLen()]] returns the number of particles in the list, and [[List()]] returns an array of pointers to the names of all the particles in the [[particleDataTable]].
<<particleDataTable methods>>=
	int particleDataTable::ListLen() const {
		int len=0;
		tableEntry *te = this->head;
		while(te!=NULL) {
			len++;
			te = te->next();
		}
		return(len);
	}
	
	char** particleDataTable::List() const {
		int particleno = 0;
		int listlen = ListLen();
		particleData p;
		char** list;
		list = (char**) malloc(listlen*sizeof(char*));
		tableEntry *te = this->head;
		while(te!=NULL) {
			p = te->Particle();
			list[particleno] = (char*) malloc( ((p.Name().length())+1)*sizeof(char));
			strcpy(list[particleno],p.Name().c_str());
//			p.Name().to_char_type(list[particleno]);
			particleno++;
			te = te->next();
		}
		return(list);
	}
 
@ The methods [[get(string name)]] allows access to the [[particleData]] by name of the particle.
<<particleDataTable methods>>=
	particleData particleDataTable::get(string name) const {
		tableEntry *te = this->head;
		while(te!=NULL) {
			if( (te->Particle()).Name() == name )
				return te->Particle();
			te = te->next();
		}
		return particleData(); 
		// null particle
	}

@ If you need the mass or width of a particle in the table, use the [[mass(name)]] or [[width(name)]] methods, respectively.
<<particleDataTable methods>>=
	double particleDataTable::mass(string name) const {
		return this->get(name).Mass();
	}

	double particleDataTable::width(string name) const {
		return this->get(name).Width();
	}
